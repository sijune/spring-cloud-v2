plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '1.0'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.8")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // zipkin
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth' //span id, trace id
    //implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation group: 'org.springframework.cloud', name:'spring-cloud-starter-zipkin', version: '2.2.3.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-actuator' // actuator를 사용하여 환경설정파일 적용

    implementation 'io.micrometer:micrometer-registry-prometheus' //micrometer에서 prometheus로 전달하기 위해 추가

    runtimeOnly group: 'com.h2database', name: 'h2', version: '1.3.176'
    implementation group: 'org.modelmapper', name:'modelmapper', version: '2.3.8'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.kafka:spring-kafka'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
